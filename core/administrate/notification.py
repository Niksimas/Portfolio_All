import asyncio

from datetime import timedelta

from aiogram.exceptions import *
from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import State, StatesGroup

import core.keyboard.inline as kbi
from core.database import database

subrouter = Router()


@subrouter.callback_query(F.data == "notif")
async def start_notification_block(call: CallbackQuery):
    await call.message.edit_text("–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, "
                                 "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ üëá",
                                 reply_markup=kbi.blocking())
    return

# class NotificationProcess(StatesGroup):
#     SetMessage = State()
#     SetPhoto = State()
#     SetPeople = State()
#     CheckMessage = State()
#     StartNotification = State()
#
#
# @subrouter.callback_query(F.data == "no", NotificationProcess.CheckMessage)
# @subrouter.callback_query(F.data == "notif")
# async def start_notification(call: CallbackQuery, state: FSMContext):
#     msg = await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å!",
#                                        reply_markup=kbi.cancel_admin())
#     await state.update_data({"del": msg.message_id})
#     await state.set_state(NotificationProcess.SetMessage)
#     return
#
#
# @subrouter.message(NotificationProcess.SetMessage)
# async def set_message(mess: types.Message, state: FSMContext, bot: Bot):
#     try:
#         msg_del = (await state.get_data())["del"]
#         await bot.edit_message_reply_markup(mess.from_user.id, msg_del, reply_markup=None)
#     except:
#         pass
#     await state.set_data({"text": mess.html_text})
#     await mess.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?",
#                       reply_markup=kbi.confirmation())
#     return
#
#
# @subrouter.callback_query(F.data == "yes", NotificationProcess.SetMessage)
# async def set_photo_yes(call: types.CallbackQuery, state: FSMContext):
#     await state.set_state(NotificationProcess.SetPhoto)
#     await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n<b>(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –û–î–ù–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é)</b>",
#                                  reply_markup=kbi.cancel_admin())
#     return
#
#
# @subrouter.message(F.media_group_id, NotificationProcess.SetPhoto)
# async def save_photo_front(mess: Message, state: FSMContext):
#     data = await state.get_data()
#     try:
#         b = data["group_id"]
#     except KeyError:
#         await state.update_data({"group_id": mess.media_group_id})
#         await mess.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
#
#
# @subrouter.message(NotificationProcess.SetPhoto)
# async def set_photo(mess: types.Message, state: FSMContext, bot: Bot):
#     photo = mess.photo
#     if photo is None:
#         await mess.answer("–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
#         return
#     try:
#         msg_del = (await state.get_data())["del"]
#         await bot.edit_message_reply_markup(mess.from_user.id, msg_del, reply_markup=None)
#     except:
#         pass
#     await state.update_data({"id_photo": photo[-1].file_id})
#
#     data = await state.get_data()
#     try:
#         msg1 = await mess.answer_photo(data["id_photo"])
#         msg2 = await mess.answer(data["text"])
#         await state.update_data({"del1": msg1.message_id, "del2": msg2.message_id})
#     except:
#         msg1 = await mess.answer(data["text"])
#         await state.update_data({"del1": msg1.message_id})
#     await mess.answer("–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ —è –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É: ",
#                               reply_markup=kbi.confirmation())
#     await state.set_state(NotificationProcess.CheckMessage)
#
#
# @subrouter.callback_query(F.data == "yes", NotificationProcess.CheckMessage)
# async def start_notif(call: types.CallbackQuery, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     try:
#         await bot.delete_message(call.from_user.id, data["del1"])
#         await bot.delete_message(call.from_user.id, data["del2"])
#     except:
#         pass
#     user_id = database.get_all_id_user()
#     await call.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞! –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —è –≤—ã—à–ª—é –≤–∞–º –∏—Ç–æ–≥–∏!\n"
#                                  "–†–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ "
#                                  "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã\n"
#                                  f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {timedelta(seconds=len(user_id)*2)}")
#     result = {"notif_t": 0, "notif_f": 0}
#     for i in user_id:
#         await asyncio.sleep(2)
#         try:
#             try:
#                 await bot.send_photo(chat_id=i, photo=data["id_photo"])
#                 await bot.send_message(chat_id=i, text=data["text"],
#                                        disable_web_page_preview=True)
#             except KeyError:
#                 await bot.send_message(chat_id=i, text=data["text"],
#                                        disable_web_page_preview=True)
#             result["notif_t"] += 1
#         except (TelegramForbiddenError, TelegramBadRequest):
#             result["notif_f"] += 1
#     await call.message.answer(f"–í–æ—Ç –∏—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: \n"
#                               f"{result['notif_t']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
#                               f"{result['notif_f']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
#     await state.clear()
#     return
